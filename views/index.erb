<%- require 'html_truncator'
    # If total_pages == -1, we are displaying the single post page  -%>
<%- if total_pages == -1
      # Explained the total_pages == -1 check in app.rb
      date_matches = post[:datetime].match(/(\d{4})-(\d{2})-(\d{2})-(\d{4})/)
      date         = Date.new(date_matches[1].to_i, date_matches[2].to_i, date_matches[3].to_i).to_time.utc.to_i

      reading_time = post[:body].reading_time(format: :approx)
      content      = _markdown(post[:body].lines.join) -%>
  <%= erb :post, locals: {
	               date:           date,
	               title:          post[:_title],
	               content:        content,
	               html_truncated: false,
	               link:           post[:link],
	               reading_time:   reading_time
               }
  -%>
<%- else
      posts.each do |post|
        date_matches = post[:datetime].match(/(\d{4})-(\d{2})-(\d{2})-(\d{4})/)
        date         = Date.new(date_matches[1].to_i, date_matches[2].to_i, date_matches[3].to_i).to_time.utc.to_i

        reading_time = post[:body].reading_time(format: :approx)
        # So the ellipsis goes inside the code block, if it ends in one, for better appearance
        HTML_Truncator.ellipsable_tags << 'pre'
        content = HTML_Truncator.truncate(_markdown(post[:body].lines.join),
                                          100, ' [&hellip;]')
        title = post[:_title]

        search_terms ||= [] # If search_terms have been passed, we are on search mode
        search_terms.each do |w|
          if content.downcase.index(w)
            start_index         = content.downcase.index(w)
            end_index           = start_index + w.length
            # This is how the search term is written inside the post's text. We search by downcasing it.
            original_occurrence = content[start_index..end_index - 1]
            content.gsub!(/#{original_occurrence}/i, '<mark class=\'search\'>\0</mark>')

            content.scan(/href=".*?"/).each do |s|
              edited_link = s.gsub('<mark class=\'search\'>', '')
              edited_link.gsub!('</mark>', '')
              content.gsub!(s, edited_link)
            end

            content.scan(/\/assets\/.*?"/).each do |s|
              edited_link = s.gsub('<mark class=\'search\'>', '')
              edited_link.gsub!('</mark>', '')
              content.gsub!(s, edited_link)
            end
          end

          if title.downcase.index(w)
            start_index         = title.downcase.index(w)
            end_index           = start_index + w.length
            # This is how the search term is written inside the post's text. We search by downcasing it.
            original_occurrence = title[start_index..end_index - 1]
            title.gsub!(/#{original_occurrence}/i, '<span class=\'search-mark\'>\0</span>')
          end
        end -%>
    <%= erb :post, locals: {
	                 date:           date,
	                 title:          title,
	                 content:        content,
	                 html_truncated: content.html_truncated?,
	                 link:           post[:link],
	                 reading_time:   reading_time
                 }
    -%>
  <%- end -%>
<%- end -%>
